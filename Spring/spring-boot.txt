Sprin + embeded server - XML configurations = Spring  boot

learn these in free time -> https://spring.io/projects

we face many Nighmares while using spring..
-> tomcat serer causes nightmare in few cases
-> POM file dependencies and versions resolving by maven may cause a very critical issues sometimes
-> database dependencies and related operations
-> XML language

spring has learnt everything with java, and it produced spring boot

spring boot become very famous because of this main reason, it became made for each other with  'Microservices'

Components of Spring boot,
- Spring boot starter
- Auto Configuration
- Spring boot Actuator
- Embedded server
- Spring boot DevTools


Advantages of Spring boot:
- stand alone and quick start
- starter code
- less configuration
- reduced cost and development time


spring starter -> https://start.spring.io/

ultimately, spring boot is also a DispatcherServlet only, which handles all the servlets and containers

we can get to know the health of each and every bean.

****IMP***** -> https://www.jrebel.com/blog/spring-annotations-cheat-sheet

what is @SpringBootAPpplication annotation?
-> it is combination of
	-> @SpringBootConfiguration
	-> @EnableAutoConfiguration
	-> @ComponentScan

@ComponentScan defines that this is the current package, and scan all the subpackages to the springboot

if we create a package other than the main package, then it will be ne scanned and bean will not be created..
to resolve this, we have tyo mention the packages list like below

@SpringBootApplication(
scanBasePackages= {
	"com.tcs.yasin",
	"com.tcs.main"
})


@Qualifier

-> if we have multiple implemenmtations of a class and all of them are beans..
-> if we try to create bean of teh interface, then spring will confuse which one to use..
-> we can specify this by using @Qualifier annotation
-> we have interface Coach, and we have implementations classes like FootballCoach, TennisCoach, etcetc..

public DemoController(@Qualifier("tennisCoach") Coach coach){
	myCoach = coach;
} 

@Primary

another way to handle this confusion is.. by setting one of the implementation class with @Primary annotation.
-> yeah... ** you know what it does by seeing the name..













